import os
import time
from concurrent.futures import ThreadPoolExecutor
from shutil import move
from multiprocessing import Pool, cpu_count

def sort_files(directory):
    """Функція для сортування файлів у каталозі за їх розширеннями."""
    if not os.path.isdir(directory):
        print(f"{directory} is not a directory")
        return
    
    with ThreadPoolExecutor() as executor:
        for root, dirs, files in os.walk(directory):
            for name in files:
                executor.submit(move_file, root, name)

def move_file(root, name):
    extension = os.path.splitext(name)[1].lower()
    if extension == '':
        extension = 'no_extension'
    target_dir = os.path.join(root, extension)

    if not os.path.isdir(target_dir):
        os.makedirs(target_dir)

    src_path = os.path.join(root, name)
    dest_path = os.path.join(target_dir, name)
    move(src_path, dest_path)

def factorize(*numbers):
    def find_factors(n):
        factors = set()
        for i in range(1, int(n**0.5) + 1):
            if n % i == 0:
                factors.add(i)
                factors.add(n // i)
        return sorted(factors)

    return [find_factors(number) for number in numbers]

def factorize_parallel(numbers):
    with Pool(cpu_count()) as pool:
        result = pool.map(factorize, numbers)
    return result

# Синхронна версія
start_time = time.time()
result = [factorize(number) for number in [128, 255, 99999, 10651060]]
end_time = time.time()
print(f"Синхронна версія: {end_time - start_time} секунд")

# Паралельна версія
start_time = time.time()
result_parallel = factorize_parallel([128, 255, 99999, 10651060])
end_time = time.time()
print(f"Паралельна версія: {end_time - start_time} секунд")


# Тестування функції
a, b, c, d = factorize(128, 255, 99999, 10651060)

# Встановлення результатів тестів для перевірки
expected_a = [1, 2, 4, 8, 16, 32, 64, 128]
expected_b = [1, 3, 5, 15, 17, 51, 85, 255]
expected_c = [1, 3, 9, 41, 123, 271, 369, 813, 2439, 11111, 33333, 99999]
expected_d = [1, 2, 4, 5, 7, 10, 14, 20, 28, 35, 70, 140, 76079, 152158, 304316, 380395, 532553, 760790, 1065106, 1521580, 2130212, 2662765, 5325530, 10651060]

# Перевірка коректності результатів
test_results = {
    "a": a == expected_a,
    "b": b == expected_b,
    "c": c == expected_c,
    "d": d == expected_d
}

test_results
